@page "/login"
@inject HttpClient HttpClient
@using System.Net.Http.Json
@using DineFlow.Data
@using System.Globalization;
@inject NavigationManager oMenu
@inject IJSRuntime JSRuntime
@using System;


<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />
<h3>Iniciar Sesión</h3>

<EditForm Model="@usuario" OnValidSubmit="IniciarSesion">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="nombre">Nombre de Usuario:</label>
        <InputText id="nombre" @bind-Value="usuario.nombre" class="form-control" />
        <ValidationMessage For="@(() => usuario.nombre)" />
    </div>

    <div class="form-group mb-3">
        <label for="contraseña">Contraseña:</label>
        <InputText id="contraseña" @bind-Value="usuario.contraseña" type="password" class="form-control" />
        <ValidationMessage For="@(() => usuario.contraseña)" />
    </div>

    <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
</EditForm>

@code {
    private Usuario usuario = new Usuario();


    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (temp != null)
        {
            oMenu.NavigateTo("/");
            await JSRuntime.InvokeVoidAsync("location.reload");
        }
    }

    [Inject] protected PreloadService PreloadService { get; set; }



    private async Task IniciarSesion()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Dark, "Loading data...");

            // Realizar la solicitud POST a "login.php"
            var response = await HttpClient.PostAsJsonAsync<Usuario>("login.php", usuario);
            PreloadService.Hide();

            var oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<Cuenta>>().Result;
            // Manejar la respuesta según tus necesidades
            if (oRespuesta.status == "success")
            {
                var nuevoCuenta = oRespuesta.data;
                nuevoCuenta.contraseña = "";
                var temp = Newtonsoft.Json.JsonConvert.SerializeObject(nuevoCuenta);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", temp);
                oMenu.NavigateTo("/");
                await JSRuntime.InvokeVoidAsync("location.reload");
            }
            else
            {
                ShowMessage(ToastType.Danger, oRespuesta.message);
            }
        }
        catch (Exception ex)
        {
            // Manejar excepciones, mostrar mensaje de error, etc.
            Console.WriteLine($"Error: {ex.Message}");
        }
    }


    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "DineFlow Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };
}
