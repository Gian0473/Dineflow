@page "/pedido/{Id:int}"
@using DineFlow.Data
@inject HttpClient HttpClient
@using System;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Globalization;
@using Newtonsoft.Json;
@inject NavigationManager oMenu
@inject IJSRuntime JSRuntime


<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.BottomRight" />
<div class="col-sm">
    <a class="btn btn-sm btn-outline-primary " href="/historicopedidos"><i class="bi bi-arrow-90deg-left"></i>Volver</a>
</div>
@if (pedido != null)
{
    <div class="card">
        <div class="card-header"><h3 style="text-align:center">Detalle del Pedido</h3></div>
        <div class="card-body row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="CodigoQR">Número de Pedido:</label>
                    <input type="text" class="form-control" id="CodigoQR" @bind="pedido.cabecera.pedido_numero" disabled />
                </div>
                <div class="form-group">
                    <label for="CodigoQR">Mesa #:</label>
                    <input type="text" class="form-control" id="CodigoQR" @bind="pedido.cabecera.id_mesa" disabled />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="CodigoQR">Fecha:</label>
                    <input type="datetime" class="form-control" id="CodigoQR" @bind="pedido.cabecera.fecha" disabled />
                </div>
                <div class="form-group">
                    <label for="CodigoQR">Ingreso #:</label>
                    <input type="datetime" class="form-control" id="CodigoQR" @bind="pedido.cabecera.id_ingresos" disabled />
                </div>
            </div>
        </div>
    </div>
    <div>
        @if (pedido.detalle != null && pedido.detalle.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Nombre del Producto</th>
                        <th>Cantidad</th>
                        <th>Precio Unitario</th>
                        <th>Precio Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in pedido.detalle)
                    {
                        <tr>
                            <td>@detalle.nombre_platillo</td>
                            <td>@detalle.cantidad</td>
                            <td>@detalle.costo.ToString("C0", new System.Globalization.CultureInfo("es-US"))</td>
                            <td>@((detalle.costo * detalle.cantidad).ToString("C0", new System.Globalization.CultureInfo("es-US")))</td>
                        </tr>

                    }
                    <tr>
                        <td></td>
                        <td></td>
                        <td>Total:</td>
                        <td>@total.ToString("C0", new System.Globalization.CultureInfo("es-US"))</td>
                    </tr>
                </tbody>
            </table>
        }
        else
        {
            <p>No hay detalles de pedido disponibles.</p>
        }
    </div>
}
else
{
    <p>No se encontró el pedido.</p>
}

@code {
    private Pedido pedido;

    [Inject] protected PreloadService PreloadService { get; set; }

    [Parameter]
    public int Id { get; set; }

    public int total = 0;

    public Cuenta usuario = new Cuenta();
    protected override async Task OnInitializedAsync()
    {
        var temp = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (temp != null)
        {
            usuario = Newtonsoft.Json.JsonConvert.DeserializeObject<Cuenta>(temp);
        }
        if (Id != 0)
        {
            await CargarPedido(Id);
        }
    }

    private async Task CargarPedido(int id)
    {
        PreloadService.Show(SpinnerColor.Dark, "Loading data...");

        // Llamar al servicio o API para obtener la información del pedido
        // Adaptar la URL según tu estructura
        var oRespuesta = await HttpClient.GetFromJsonAsync<Respuesta<Pedido>>($"pedido_info.php?id={id}");
        pedido = oRespuesta.data;
        PreloadService.Hide();

        foreach (var detalle in pedido.detalle)
        {
            total += detalle.costo * detalle.cantidad;
        }
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string obser) => messages.Add(CreateToastMessage(toastType, obser));

    private ToastMessage CreateToastMessage(ToastType toastType, string obser)
    => new ToastMessage
        {
            Type = toastType,
            Title = "DineFlow Notificación",
            HelpText = $"{DateTime.Now}",
            Message = obser,
        };
}
